[workspace]
resolver = "2"
members = [
    "crates/jv_support",
    "crates/jv_lexer",
    "crates/jv_parser_preprocess",
    "crates/jv_parser_semantics",
    "crates/jv_parser_frontend",
    "crates/jv_parser_rowan",
    "crates/jv_ast",
    "crates/jv_ir",
    "crates/jv_inference",
    "crates/jv_type_inference_java",
    "crates/jv_codegen_java",
    "crates/jv_mapper",
    "crates/jv_checker",
    "crates/jv_fmt",
    "crates/jv_pm",
    "crates/jv_build",
    "crates/jv_lsp",
    "crates/jv_cli",
    "crates/jv_docs",
]

[workspace.package]
version = "0.1.4"
edition = "2024"
license = "MIT OR Apache-2.0"
authors = ["jv Language Team"]
repository = "https://github.com/project-jvlang/jv-lang"

[workspace.dependencies]
# CLI framework
clap = { version = "4.5", features = ["derive", "env"] }
anyhow = "1.0"
indicatif = "0.17"

# LSP framework
tower-lsp = "0.20"
tokio = { version = "1.42", features = ["full"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"
chrono = { version = "0.4", features = ["serde"] }

# Testing
test-case = "3.0"
proptest = "1.0"
fastrand = "2.3"
insta = "1.40"

# Utilities
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = "0.3"
once_cell = "1.21"

# Internal crates
jv_lexer = { path = "crates/jv_lexer" }
jv_parser_preprocess = { path = "crates/jv_parser_preprocess" }
jv_parser_semantics = { path = "crates/jv_parser_semantics" }
jv_parser_frontend = { path = "crates/jv_parser_frontend" }
jv_parser_rowan = { path = "crates/jv_parser_rowan" }
jv_ast = { path = "crates/jv_ast" }
jv_ir = { path = "crates/jv_ir" }
jv_inference = { path = "crates/jv_inference" }
jv_type_inference_java = { path = "crates/jv_type_inference_java" }
jv_codegen_java = { path = "crates/jv_codegen_java" }
jv_mapper = { path = "crates/jv_mapper" }
jv_checker = { path = "crates/jv_checker" }
jv_fmt = { path = "crates/jv_fmt" }
jv_pm = { path = "crates/jv_pm" }
jv_build = { path = "crates/jv_build" }
jv_lsp = { path = "crates/jv_lsp" }
jv_cli = { path = "crates/jv_cli" }
jv_support = { path = "crates/jv_support" }

[profile.dev]
# Minimal debug info to reduce memory usage
debug = 0
# No optimization to reduce memory usage
opt-level = 0
# Increase codegen units to lower per-unit memory consumption
codegen-units = 256
# Disable LTO in dev to save memory
lto = false
# Disable incremental compilation to save memory
incremental = false
# Strip debug info to reduce memory usage
strip = "debuginfo"
# Reduce memory usage during compilation
split-debuginfo = "unpacked"

[profile.release]
# Full debug info for production builds
debug = false
# Enable all optimizations
opt-level = 3
# Use fewer codegen units for better optimization
codegen-units = 1
# Enable full LTO for smallest binary size
lto = "fat"
# Strip symbols to reduce binary size
strip = true
# Enable panic=abort for smaller binary size
panic = "abort"

# Don't optimize dependencies in dev builds to save memory
[profile.dev.package."*"]
opt-level = 0
debug = 0

# Don't optimize build dependencies to save memory
[profile.dev.build-override]
opt-level = 0
debug = 0
codegen-units = 16
