fun main(): Unit {
    val modules = ["lexer" "parser" "ast" "codegen" "cli"]

    val highlighted = modules
        .map { value -> value + "-module" }
        .filter { candidate -> candidate.length >= 7 }
        .toList()

    println(highlighted)

    val highlightedCast = (
        modules
            .map { value -> value + "-module" }
            .filter { candidate -> candidate.length >= 7 }
    ) as List

    println("Cast with as List: ${highlightedCast}")

    val highlightedImplicit: List = modules
        .map { value -> value + "-module" }
        .filter { candidate -> candidate.length >= 7 }

    println("Implicit List via type: ${highlightedImplicit}")

    val metrics = [122 95 128 131 140]

    val adjustedMetrics = metrics
        .map { value -> value + 10 }
        .filter { candidate -> candidate % 3 == 0 } as List

    val totalAdjusted = adjustedMetrics.sum()
    val adjustedCount = adjustedMetrics.size
    val averageAdjusted = when (adjustedCount) {
        0 -> 0
        else -> totalAdjusted / adjustedCount
    }

    println("Adjusted metrics: ${adjustedMetrics}")
    println("Total adjusted: ${totalAdjusted}")
    println("Average adjusted: ${averageAdjusted}")

    val containsParserModule = highlighted.contains("parser-module")
    println("Has parser-module: ${containsParserModule}")

    val numbers = [1 2 3 4 5]
    // Map
    doubled = numbers.map { i -> i * 2 } as List
    println("Doubled: ${doubled}")

    // Filter
    evens = numbers.filter { i -> i % 2 == 0 }.toList()
    println("Evens: ${evens}")

    // Reduce
    sum = numbers.reduce {(acc x) -> acc + x }
    println("Sum: ${sum}")

    // Combined pipeline (map → filter → reduce)
    combined = numbers
        .map { value -> value * 3 }
        .filter { value -> value > 6 }
        .reduce {(acc value) -> acc + value }
    println("Combined: ${combined}")
}
